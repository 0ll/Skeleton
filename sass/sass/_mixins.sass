// See skeleton file for copyright info

// this file depends on...
@import functions

// ---- MIXINS ----

// border radius mixin
=border-radius($radius...)
    $radius: unquote($radius)
    -webkit-border-radius: $radius
    -moz-border-radius: $radius
    -ms-border-radius: $radius
    -o-border-radius: $radius
    border-radius: $radius

=bd($vert, $horiz, $radius)
    -webkit-border-#{$vert}-#{$horiz}-radius: $radius
    -moz-border-radius-#{$vert}#{$horiz}: $radius
    border-#{$vert}-#{$horiz}-radius: $radius

=border-top-left-radius($radius: $default-border-radius)
    +bd("top", "left", $radius)

=border-top-right-radius($radius: $default-border-radius)
    +bd("top", "right", $radius)

=border-bototm-left-radius($radius: $default-border-radius)
    +bd("bottom", "left", $radius)

=border-bottom-right-radius($radius: $default-border-radius)
    +bd("bottom", "right", $radius)

=border-top-radius($radius: $default-border-radius)
    +border-top-left-radius($radius)
    +border-top-right-radius($radius)

=border-right-radius($radius: $default-border-radius)
    +border-top-right-radius($radius)
    +border-bottom-right-radius($radius)

=border-bottom-radius($radius: $default-border-radius)
    +border-bottom-left-radius($radius)
    +border-bottom-right-radius($radius)

=border-left-radius($radius: $default-border-radius)
    +border-top-left-radius($radius)
    +border-bottom-left-radius($radius)

// opacity
=opacity($alhpa, $ie: true)
    @if type-of($alpha) != number
        @warn "$alpha must be a number. Setting to 0.5."
        $alpha: 0.5
    @else
        @if $alpha < 0 or $alpha > 1
            @warn "$alpha must be within 0 and 1. Setting to 0.5."
            $alpha: 0.5
    @if $ie == true
        filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=$alpha * 100)
    opacity: $alpha

// text shadow
=text-shadow($shadow)
    $shadow: unquote($shadow)
    @if type-of($shadow) != "list" and type-of($shadow) != "string"
        @warn "Invalid parameters passed. Expected a list or a string got #{type-of($shadow)}. Defaulting to none."
        $shadow: none
    @if $shadow == none
        text-shadow: none
    @else
        text-shadow: $shadow

// box shadow
=box-shadow($shadow)
    $shadow: unquote($shadow)
    @if type-of($shadow) != "list" and type-of($shadow) != "string"
        @warn "Invalid parameters passed. Expected a list or a string got #{type-of($shadow)}. Defaulting to none."
        $shadow: none
    @if $shadow == none
        -webkit-box-shadow: none
        -moz-box-shadow: none
        box-shadow: none
    @else
        -webkit-box-shadow: $shadow
        -moz-box-shadow: $shadow
        box-shadow: $shadow

// box sizing
=box-sizing($type)
    $type: unquote($type)
    @if $type != content-box and $type != padding-box and $type != border-box
        @warn "Allowed values are content-box, padding-box, or border-box. Got #{$type} but defaulting to content-box."
        $type: content-box
    -webkit-box-sizing: $type
    -moz-box-sizing: $type
    box-sizing: $type

=grid($width: $baseWidth, $fluid: $isFluid, $colWidth: $baseColWidth, $gutterWidth: $baseGutterWidth, $colCount: $baseColCount)
    @if $fluid == true
        // and for you math heads... a_n = (100n / $colCount) - 2
        // where n is the iteration
        +_fluidGrid($colCount)
    @else
        // and for you math heads... a_n = 40 + ( 60 ( n - 1 ) )
        // where 40 = column width
        // where 60 is the consistent difference between each column
        // where n is the iteration
        +_fixedGrid($width, $colWidth, $gutterWidth, $colCount)

// "PRIVATE" MIXINS - these are mixins the help separate logic and should never be used outside of the grid mixin
// generate the fluid grid
=_fluidGrid($colCount, $unit: "%")
    // override only for fluid
    /* Overrides
    .container
        .column,
        .columns
            margin:
                left: 1%
                right: 1%
    /* The Grid
    .container
        @for $i from 1 through $colCount
            @if $i == 1
                .#{numToString($i)}.column,
                .#{numToString($i)}.columns
                    width: 100 * $i / $colCount - 2#{$unit}
            @else
                .#{numToString($i)}.columns
                    width: 100 * $i / $colCount - 2#{$unit}
        /* The Offsets
        +_offset($unit, $colCount, false)

// generate the fixed grid
=_fixedGrid($width, $colWidth, $gutterWidth, $colCount)
    @if $gutterWidth != $baseGutterWidth
        /* Gutter Overrides
        .container
            .column,
            .columns
                margin:
                    left: $gutterWidth / 2
                    right: $gutterWidth / 2
    /* The Grid
    .container
        @for $i from 1 through $colCount
            @if $i == 1
                .#{numToString($i)}.column,
                .#{numToString($i)}.columns
                    width: $colWidth
            @else
                .#{numToString($i)}.columns
                    width: $colWidth + ($colWidth + $gutterWidth) * ($i - 1)
        .one-third.column
            width: $width / 3 - 20
        .two-thirds.column
            width: $width * 2 / 3 - 20
        /* The Offsets
        +_offset("px", $colCount, $colWidth)

// generate the offset
// Note: although $colWidth is optional, it is REQUIRED by the fixed grid
=_offset($unit, $colCount, $colWidth)
    @if $unit == "%"
        @for $i from 1 through $colCount - 1
            .offset-by-#{numToString($i)}
                padding-left: 100 * $i / $colCount * $i#{$unit}
    @else
        @for $i from 1 through $colCount - 1
            .offset-by-#{numToString($i)}
                padding-left: ($colWidth + 20) * $i
